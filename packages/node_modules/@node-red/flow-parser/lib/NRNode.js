const NRObject = require("./NRObject.js");

/**
 * NRNode - Description
 * @property {number} x - X location
 * @property {number} y - Y location
 * @property {number} w - width (if known)
 * @property {number} h - height (if known)
 * @property {string} group - group this node is part of, if set
 * @property {NRWire[]} inboundWires - Array of wires connected to an input of this node
 * @property {NRWire[]} outboundWires - Array of wires connected to an output of this node
 * @extends NRObject
 */
class NRNode extends NRObject {

    /**
     * constructor - Description
     *
     * @param {type} config Description
     */
    constructor(config) {
        super(config);
        this.x = config.x;
        this.y = config.y;
        if (config.hasOwnProperty('w')) {
            this.w = config.w;
        }
        if (config.hasOwnProperty('h')) {
            this.h = config.h;
        }
        this.group = config.g;
        this.wires = config.wires || [];
        this.outputCount = this.wires.length;

        delete config.x;
        delete config.y;
        delete config.w;
        delete config.h;
        delete config.g;
        delete config.wires;

        this.inboundWires = [];
        this.outboundWires = [];
    }

    export() {
        let obj = super.export();
        obj.x = this.x;
        obj.y = this.y;
        if (this.group) {
            obj.g = this.group;
        }
        obj.wires = new Array(this.outputCount).fill(true).map(_ => [])
        this.outboundWires.forEach(wire => {
            if (!wire.virtual) {
                obj.wires[wire.sourcePortIndex] = obj.wires[wire.sourcePortIndex] || [];
                obj.wires[wire.sourcePortIndex].push(wire.destinationNode.id);
            }
        })
        return obj;
    }

    getSiblingNodes(followVirtual) {
        return this.getPreviousNodes(followVirtual).concat(this.getNextNodes(followVirtual));
    }

    getPreviousNodes(followVirtual) {
        let result = [];
         this.inboundWires.forEach(wire => {
             if (!wire.virtual || followVirtual) {
                 result.push(wire.sourceNode);
             }
         });
         return result;
    }

    getNextNodes(followVirtual) {
        let result = [];
         this.outboundWires.forEach(wire => {
             if (!wire.virtual || followVirtual) {
                 result.push(wire.destinationNode);
             }
         });
         return result;
    }

    getDownstreamNodes(followVirtual) {
        const visited = { };
        visited[this.id] = true;
        const result = [ ];
        const stack = this.getNextNodes(followVirtual);
        while(stack.length > 0) {
            let node = stack.pop();
            if (!visited[node.id]) {
                result.push(node);
                visited[node.id] = true;
                let next = node.getNextNodes(followVirtual);
                next.forEach(n => {
                    if (!visited[n.id]) {
                        stack.push(n);
                    }
                })
            }
        }
        return result;
    }

    getUpstreamNodes(followVirtual) {
        const visited = { };
        visited[this.id] = true;
        const result = [ ];
        const stack = this.getPreviousNodes(followVirtual);
        while(stack.length > 0) {
            let node = stack.pop();
            if (!visited[node.id]) {
                result.push(node);
                visited[node.id] = true;
                let previous = node.getPreviousNodes(followVirtual);
                previous.forEach(n => {
                    if (!visited[n.id]) {
                        stack.push(n);
                    }
                })
            }
        }
        return result;
    }

    getConnectedNodes(followVirtual) {
        const visited = { };
        const result = [ ];
        const stack = [this];
        while(stack.length > 0) {
            let node = stack.pop();
            if (!visited[node.id]) {
                result.push(node);
                visited[node.id] = true;
                let siblings = node.getSiblingNodes(followVirtual);
                siblings.forEach(sibling => {
                    if (!visited[sibling.id]) {
                        stack.push(sibling);
                    }
                })
            }
        }
        return result;
    }


}

module.exports = NRNode;
