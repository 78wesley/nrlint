#!/usr/bin/env node

/* eslint no-process-exit: 0 */
const nopt = require('nopt');
const fs = require('fs');
const path = require('path');
const linter = require('../lib/linter');
const os = require('os');

const defaultConfigFile = path.join(os.homedir(), '.nrlintrc.js');

const knownOpts = {
    'help': Boolean,
    'config': [path],
};

const shortHands = {
    'h':['--help'],
    'c':['--config'],
};

const parsedArgs = nopt(knownOpts, shortHands, process.argv, 2);

const helpMessage = `Lint tool for Node-RED flow
Usage: nrlint [-h] [-c configfile] flows.json'

Options:
  -h, --help                show this help
  -c, --config configfile   use specified configuration
                            otherwise, use .nrlintrc.js`;

if (parsedArgs.help) {
    console.log(helpMessage);
    process.exit();
}

if (parsedArgs.argv.remain.length !== 1) {
    console.error('Error: no input file');
    console.error(helpMessage);
    process.exit(1);
}

// read configuration file
const configFile = parsedArgs.config ? parsedArgs.config : defaultConfigFile;
let config;
try {
    config = require(configFile);
    config.configFile = configFile;
} catch(err) {
    console.log(`Error loading settings file: ${parsedArgs.config}`);
    console.log(err);
    process.exit(1);
}

const flowFile = parsedArgs.argv.remain[0];

function printResult(result) {  // TODO: customizable output format
    let errCount = 0;
    let warnCount = 0;

    result.forEach((e) => {
        if (!e.error) {
            console.log(`  ${e.location[0]}${e.location.length>1?"...":""}\t${e.severity}\t'${e.message}'\t${e.name}`);
            if (e.severity === "error") {
                errCount += 1;
            } else if (e.severity === "warn") {
                warnCount += 1;
            }
        }
    });
    console.log(`âœ– ${errCount+warnCount} problems (${errCount} errors, ${warnCount} warnings)`);
}
const rules = {};

if (config.plugins) {
    config.plugins.forEach(pluginName => {
        try {
            const plugin = require(pluginName);
            Object.keys(plugin).forEach(function(r) {
                rules[r] = plugin[r];
            })
        } catch(err) {
            console.log(err);
        }
    })
}

linter.init({
    resolveRule: r => rules[r]
})

try {
    const flowstr = fs.readFileSync(flowFile);
    console.log(`parsing ${flowFile}...`);
    const flowobj = JSON.parse(flowstr);
    const result = linter.lint(flowobj, config);
    printResult(result);
} catch(err) {
    console.error(err.stack,`${err.toString()}`);
}
