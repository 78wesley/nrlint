/* */
const FlowParser = require('@node-red/flow-parser');

let resolveRule = name => {};

function init(opts) {
    if (opts.resolveRule) {
        resolveRule = opts.resolveRule;
    }
}

/**
 * Verify flows based on configuration object
 * @param {object} flowobj Flows subject to verification
 * @param {object} config  Configuration object. {"rules": [ {"name": ..., }], ... }
 * @returns {Promise} Promise object which resolves to {context, results [...]}
*/
function lint(flowobj, config) {
    const flowSet = FlowParser.parseFlow(flowobj);
    let result = [];
    Object.keys(config.rules).forEach(function(ruleName) {
        let rule = resolveRule(ruleName);
        if (!rule || config.rules[ruleName] === "off") {
            console.log("BAIL",ruleName)
            // Not a rule we know about || Rule disabled
            return
        }
        let ruleConfig = config.rules[ruleName];
        let context = {
            report: function(opts) {
                opts.rule = ruleName;
                if (!opts.severity) {
                    opts.severity = ruleConfig.severity || rule.meta.severity || "warn"
                }
                result.push(opts);
            }
        }
        rule.check(flowSet, ruleConfig, context)
    })
    return result;
}

module.exports = {
    init: init,
    lint: lint
};
