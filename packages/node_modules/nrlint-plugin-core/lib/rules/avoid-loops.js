
module.exports = {
    meta: {
        type: "suggestion",
        severity: "warn",
        docs: {
            description: "ensure there are no loops in the flows"
        },
        schema: []
    },
    create: function(context, ruleConfig) {

        let checked = {};

        function checkNode(node) {
            checked[node.id] = true;
            if (node.getPreviousNodes(true).length === 0) {
                // Nothing before this node - cannot be in a loop
                return;
            }
            let next = node.getNextNodes(true);
            if (next.length === 0) {
                // Nothing after this node - cannot be in a loop
                return;
            }
            let stack = [node]
            let visited = {};
            while(stack.length > 0) {
                let n = stack.pop();
                checked[n.id] = true;
                if (!visited[n.id]) {
                    visited[n.id] = true;
                    let next = n.getNextNodes(true);
                    next.forEach(n => {
                        stack.push(n);
                    })
                } else {
                    context.report({
                        location: [n.id],
                        message: "loop detected"
                    });
                }
            }
        }
        return {
            node: function(node) {
                if (!checked[node.id]) {
                    checkNode(node);//.getConnectedNodes(true))
                }
            }
        }
    }
};
