var Linter = require('eslint4b');
var linter = new Linter();

/**
 * Check coding style in a function node.
 * @param {FlowSet} afs complete flow set
 * @param {*} conf configuration for this rule. {name: "func-style-eslint", rules: ESLint rules }
 * @param {*} cxt context
 */
function check(afs, conf, cxt) {
    var funcs = afs.getAllNodesArray()
        .filter(function (e) {return e.type==='function';})
        .map(function (e) {
            return {id:e.id, func:e.func};
        });
    funcs.forEach(function (e) {
        var f = "function dummy(msg) {\n" + e.func + "\n};";
        var result = linter.verify(f, conf);
        result.forEach(function(r) {
            cxt.report({
                location: [e.id],
                message: r.message,
                severity: (r.severity == 1)? "warn" : "error",
                additionalInfo: r
            })
        });
    });
}

module.exports = {
    meta: {
        type: "suggestion",
        docs: {
            description: "run eslint on Function nodes"
        },
        schema: [
            {
                type: "object"
                // all valid eslint options
            }
        ]
    },
    check: check
};
